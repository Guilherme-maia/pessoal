{"paragraphs":[{"title":"Inicialização de pacotes, variáveis e funções","text":"%pyspark\n\n####################################################\n#   Importação de pacotes & definição de funções   #\n####################################################\n\nfrom datetime import *\nfrom pyspark import StorageLevel\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql.types import *\nfrom pyspark.sql.functions import *\n\n# Função para otimizar o tamanho dos arquivos de saída definindo um número otimal de partições\ndef numPartitionsOut(dataframe, n):\n    \n    from math import floor\n\n    # Volumetria do dataframe\n    v = dataframe.count()\n    \n    return int(floor(v/n))\n\n\n# Função de leitura do Metadados\ndef readMetadata(dir):\n  \n  import json\n  \n  # Lendo o metadados do diretório especificado\n  metadados = []\n  \n  for linha in spark.sparkContext.textFile(dir).collect():\n    info = json.loads(linha)\n\n    # Faz o tratamento dos campos com conteúdo 'None' e monta o array da janela de tempo\n    for chave in info:\n      if info[chave] == \"None\":\n        info[chave] = None\n        \n      if chave == \"janela_de_tempo\" and info[chave]:\n        string = info[chave]\n        range00 = int(string.split(\"([\")[1].split(\",\")[0])\n        range01 = int(string.split(\"([\")[1].split(\",\")[1].split(\"]\")[0])\n        unidade = string.split(\"([\")[1].split(\",\")[2].split(\")\")[0].strip().replace(\"'\", \"\")\n        info[chave] = [(range00, range01), unidade]\n        \n    metadados.append(info)\n  \n  return metadados\n\n\n##############################\n#   Declaração de variáveis  #\n##############################\n\n# Referência de processamento\nref = str(datetime.today() + timedelta(days = -1))[0:4] + str(datetime.today() + timedelta(days = -1))[5:7] + str(datetime.today() + timedelta(days = -1))[8:10]\n\n# Caminho de origem da stage0\norigem_stage0 = \"s3://stage0-pedidos-ecred/dataform/parquet/*.parquet\"\n\n# Caminho de destino do metadados\ndestino_meta = \"s3://lake-ecs-ia-utils/dataform/metadados/\"\n\n# Caminho de destino do book\ndestino_book = \"s3://book-pedidos-ecred/dataform/parquet/\"\n\n# Iniciando sessão spark\nspark = SparkSession.builder.appName(\"book_pedidos_ind_desenv\").getOrCreate()","user":"anonymous","dateUpdated":"2019-11-28T12:19:12+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1574942087674_-2146410187","id":"20191011-192152_43347990","dateCreated":"2019-11-28T11:54:47+0000","dateStarted":"2019-11-28T12:19:12+0000","dateFinished":"2019-11-28T12:19:12+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:2651"},{"title":"Classe Dataform","text":"%pyspark\n\nclass Dataform:\n  \n  # Lista com os deparas de tipagem\n  depara = {\"NullType()\": NullType(), \"StringType()\": StringType(), \"BinaryType()\": BinaryType(), \"BooleanType()\": BooleanType(), \"DateType()\": DateType(), \"TimestampType()\": TimestampType(),\n\"DecimalType()\": DecimalType(), \"DoubleType()\": DoubleType(), \"FloatType()\": FloatType(), \"ByteType()\": ByteType(), \"IntegerType()\": IntegerType(), \"LongType()\": LongType(), \"ShortType()\": ShortType(),\n\"ArrayType(NullType())\": ArrayType(NullType()), \"ArrayType(StringType())\": ArrayType(StringType()), \"ArrayType(BinaryType())\": ArrayType(BinaryType()), \"ArrayType(BooleanType())\": ArrayType(BooleanType()), \"ArrayType(DateType())\": ArrayType(DateType()), \"ArrayType(TimestampType())\": ArrayType(TimestampType()), \"ArrayType(DecimalType())\": ArrayType(DecimalType()), \"ArrayType(DoubleType())\": ArrayType(DoubleType()), \"ArrayType(FloatType())\": ArrayType(FloatType()), \"ArrayType(ByteType())\": ArrayType(ByteType()), \"ArrayType(IntegerType())\": ArrayType(IntegerType()), \"ArrayType(LongType())\": ArrayType(LongType()), \n\"ArrayType(ShortType())\": ArrayType(ShortType())}\n  \n  # Referência de processamento\n  ref = str(datetime.today())[0:10]\n  \n  def __init__(self, Dataframe, Metadata=None):\n    \n    if not Metadata:\n      self.Dataframe = Dataframe\n      self.Metadata = []\n      \n      # Vamos inicializar a construção do metadata de cada variável\n      for coluna in self.Dataframe.columns:\n        info = {\n          \"nome\": coluna,\n          \"origem\": coluna,\n          \"tipo\": \"StringType()\",\n          \"valor_se_nulo\": None,\n          \"dominio\": None,\n          \"transformacao\": None,\n          \"versao\": self.ref\n        }\n        self.Metadata.append(info)\n    else:\n        self.Metadata = Metadata\n        \n        # A partir de um dado metadados fornecido pelo usuário, iniciaremos o Dataforming\n        # Etapa 01 - Pré seleção das colunas de origem\n        infos_com_origem = [info for info in self.Metadata if info[\"origem\"]]\n        colunas = [info[\"origem\"] for info in infos_com_origem]\n        self.Dataframe = Dataframe.select(colunas)\n        \n        # Etapa 02 - Inicializa os módulos (Caster, Coalescer, Transformer, Domain, Namer)\n        # Faremos primeiro os casos sem origem\n        infos_sem_origem = [info for info in self.Metadata if not info[\"origem\"]]\n        infos_de_grau_maiorigual_um = []\n        \n        for info in infos_sem_origem:\n          try:\n            self.transformedAs({info[\"nome\"]: info[\"transformacao\"]}, True)\n            self.coalescedAs({info[\"nome\"]: info[\"valor_se_nulo\"]}, True)\n            self.castedAs({info[\"nome\"]: self.depara[info[\"tipo\"]]}, True)\n            self.domainAs({info[\"nome\"]: info[\"dominio\"]}, True)\n          except:\n            infos_de_grau_maiorigual_um.append(info)\n            \n        # Agora os casos que possuem origem\n        for info in infos_com_origem:\n          self.transformedAs({info[\"origem\"]: info[\"transformacao\"]}, True)\n          self.coalescedAs({info[\"origem\"]: info[\"valor_se_nulo\"]}, True)\n          self.castedAs({info[\"origem\"]: self.depara[info[\"tipo\"]]}, True)\n          self.domainAs({info[\"origem\"]: info[\"dominio\"]}, True)\n          \n        # Executa os módulos para as variáveis de grau maior ou iguais a 1\n        index = 0\n        \n        while infos_de_grau_maiorigual_um:\n          info = infos_de_grau_maiorigual_um[index]\n          \n          try:\n            self.transformedAs({info[\"nome\"]: info[\"transformacao\"]}, True)\n            self.coalescedAs({info[\"nome\"]: info[\"valor_se_nulo\"]}, True)\n            self.castedAs({info[\"nome\"]: self.depara[info[\"tipo\"]]}, True)\n            self.domainAs({info[\"nome\"]: info[\"dominio\"]}, True)\n            infos_de_grau_maiorigual_um.remove(info)\n            index = 0\n          except:\n            index += 1\n\n        # Por fim executa o módulo Namer para as variáveis com origem\n        for info in infos_com_origem:\n            self.namedAs({info[\"origem\"]: info[\"nome\"]}, True)\n\n  \n  # Método de atualização do metadados\n  def __updateMetadata__(self, col_list, dict_list):\n    \n    # Verifica e insere informações novas\n    for coluna in [nova_coluna for nova_coluna in col_list if nova_coluna not in self.Dataframe.columns]:\n      self.Metadata.append({\"nome\": coluna, \"origem\": None, \"tipo\": \"StringType()\", \"valor_se_nulo\": None, \"dominio\": None, \"transformacao\": None, \"versao\": self.ref})\n    \n    # Atualiza de fato o metadados\n    for info in self.Metadata:\n      if info[\"nome\"] in col_list:\n        index = col_list.index(info[\"nome\"])\n        dict = dict_list[index]\n        \n        for chave in dict.keys():\n          info[chave] = dict[chave]\n      \n      \n  # Método de construção do dataframe para o metadados\n  def __buildMetadataDF__(self):\n    \n    # Construção do header\n    meta_header = []\n    for chave in self.Metadata[0].keys():\n      meta_header.append(chave)\n    \n    # Construção das linhas\n    lst_rows = []\n    for info in self.Metadata:\n      row = []\n      \n      for valor in info.values():\n        row.append(str(valor))\n      lst_rows.append(row)\n      \n    # Constrói o dataframe\n    meta_DF = spark.createDataFrame(lst_rows, meta_header)\n    return meta_DF\n    \n    \n  @property # Retorna o metadados\n  def metadata(self):\n    return self.Metadata\n  \n  \n  @property # Retorna o dataframe\n  def dataframe(self):\n    return self.Dataframe\n  \n  \n  # Módulo 01 - Alteração de tipagem dos campos\n  def castedAs(self, dict, imported_metadata=False):\n    \n    lst_casted = []\n    \n    for coluna in self.Dataframe.columns:\n      if coluna in dict.keys() and dict[coluna]:\n        casted = col(coluna).cast(dict[coluna])\n        aliased = casted.alias(coluna)\n        if not imported_metadata:\n          self.__updateMetadata__([coluna], [{\"tipo\": str(dict[coluna]) + \"()\", \"versao\": self.ref}])\n      else:\n        aliased = col(coluna)\n      lst_casted.append(aliased)\n      \n    self.Dataframe = self.Dataframe.select(lst_casted)\n  \n  \n  # Módulo 02 - Tratamento de valores nulos\n  def coalescedAs(self, dict, imported_metadata=False):\n    \n    lst_coalesced = []\n    \n    for coluna in self.Dataframe.columns:\n      if coluna in dict.keys():\n        # Devemos checar primeiro se temos um valor a inserir ou uma expressão envolvendo uma ou mais colunas\n        try:\n          self.Dataframe.select(expr(dict[coluna]))\n          coalesced = coalesce(col(coluna), expr(dict[coluna]))\n        except:\n          coalesced = coalesce(col(coluna), lit(dict[coluna]))\n        finally:\n          aliased = coalesced.alias(coluna)\n          if not imported_metadata:\n            self.__updateMetadata__([coluna], [{\"valor_se_nulo\": dict[coluna], \"versao\": self.ref}])\n      else:\n          aliased = col(coluna)\n      lst_coalesced.append(aliased)\n        \n    self.Dataframe = self.Dataframe.select(lst_coalesced)\n  \n  \n  # Módulo 03 - Captura ou inserção da listagem de domínios\n  def domainAs(self, dict, imported_metadata=False):\n    \n    if not imported_metadata:\n      for info in self.Metadata:\n        if info[\"nome\"] in dict.keys():\n          # Verifica se necessitamos gerar este domínio através de um agrupamento na variável\n          try:\n            dominio = \"\"\n            valores = self.Dataframe.select(dict[info[\"nome\"]]).orderBy(dict[info[\"nome\"]]).dropDuplicates().collect()\n\n            for valor in valores:\n              dominio += str(valor[info[\"nome\"]]) + \", \"\n            info[\"dominio\"] = dominio[:-2]\n          except:\n            info[\"dominio\"] = dict[info[\"nome\"]]\n          info[\"versao\"] = self.ref\n  \n  \n  # Módulo 04 - Aplica transformações em colunas existentes ou cria colunas novas\n  def transformedAs(self, dict, imported_metadata=False):\n    \n    lst_transformed = []\n    \n    # Caso 01 - Coluna já existente no dataframe\n    for coluna in self.Dataframe.columns:\n      if coluna in dict.keys() and dict[coluna]:\n        transformed = expr(dict[coluna])\n        aliased = transformed.alias(coluna)\n        if not imported_metadata:\n          self.__updateMetadata__([coluna], [{\"transformacao\": dict[coluna], \"versao\": self.ref}])\n      else:\n        aliased = col(coluna)\n      lst_transformed.append(aliased)\n        \n    # Caso 02 - Uma nova coluna a ser criada\n    for coluna in [nova_coluna for nova_coluna in dict.keys() if nova_coluna not in self.Dataframe.columns]:\n      transformed = expr(dict[coluna]).cast(StringType())\n      aliased = transformed.alias(coluna)\n      lst_transformed.append(aliased)\n      if not imported_metadata:\n        self.__updateMetadata__([coluna], [{\"transformacao\": dict[coluna], \"versao\": self.ref}])\n        \n    self.Dataframe = self.Dataframe.select(lst_transformed)\n  \n  \n  # Módulo 05 - Renomeação de variáveis\n  def namedAs(self, dict, imported_metadata=False):\n    \n    lst_named = []\n    \n    for coluna in self.Dataframe.columns:\n      if coluna in dict.keys() and dict[coluna]:\n        aliased = col(coluna).alias(dict[coluna])\n        if not imported_metadata:\n          self.__updateMetadata__([coluna], [{\"nome\": dict[coluna], \"versao\": self.ref}])\n      else:\n        aliased = col(coluna)\n      lst_named.append(aliased)\n    \n    self.Dataframe = self.Dataframe.select(lst_named)\n  \n  \n  # Visualização do Metadados\n  def viewMetadata(self, truncate=True):\n    \n    meta_DF = self.__buildMetadataDF__()\n    meta_DF = meta_DF.select(col(\"nome\").alias(\"Nome\"), col(\"origem\").alias(\"Origem\"), col(\"tipo\").alias(\"Tipo\"), col(\"valor_se_nulo\").alias(\"Valor/Expressão(SQL) se Nulo\"), \n                             col(\"dominio\").alias(\"Domínio\"), col(\"transformacao\").alias(\"Transformação(SQL)\"), col(\"versao\").alias(\"Versão\"))\n    \n    return meta_DF.show(len(self.Metadata), truncate)\n  \n  \n  # Exportação do metadados para um diretório especificado pelo usuário\n  def saveMetadata(self, dir):\n    \n    meta_DF = self.__buildMetadataDF__()\n    meta_DF.coalesce(1).write.mode(\"overwrite\").format(\"json\").save(dir)\n    \n    return \"> Metadados exportado com SUCESSO para o diretório: {}.\".format(dir)\n    ","user":"anonymous","dateUpdated":"2019-11-28T11:55:37+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1574942087677_383068796","id":"20191011-195220_2137876437","dateCreated":"2019-11-28T11:54:47+0000","dateStarted":"2019-11-28T11:55:37+0000","dateFinished":"2019-11-28T11:55:37+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2652"},{"title":"Classe Book","text":"%pyspark\n\nclass Book(Dataform):\n    \n    depara_dias_segundos = {\"d\": 1, \"s\": 7, \"m\": 30, \"a\": 365, \"h\": 3600, \"min\": 60, \"seg\": 1}\n    \n    def __init__(self, origem, visao, referencia, Metadata=None, Publico=None):\n        \n        # Define o público base do book\n        if not Publico:\n            self.Dataframe = origem.select(visao).withColumn(\"dt_proc\", current_date()).withColumn(referencia, current_date()).dropDuplicates().orderBy(visao)\n            self.Publico = origem.select(visao).withColumn(referencia, current_date()).dropDuplicates().orderBy(visao)\n        else:\n            self.Dataframe = Publico.withColumn(\"dt_proc\", current_date()).orderBy(visao, referencia)\n            self.Publico = Publico\n            \n        self.Origem = origem\n        self.Metadata = []\n        self.chave_primaria = visao\n        self.chave_temporal = referencia\n        \n        if Metadata:\n            self.Metadata = Metadata\n            \n            # A partir do metadados fornecido pelo usuário iniciaremos a construção do book\n            # Primeiramente iniciaremos fazendo o depara da tipagem dos dados\n            for info in self.Metadata:\n              info[\"tipo\"] = self.depara[info[\"tipo\"]]\n            \n            # Depois daremos início ao processo de ETL\n            self.bookedAs(self.Metadata, imported_metadata=True)\n    \n    \n    # Retorna o Público\n    @property\n    def publico(self):\n      return self.Publico\n    \n    \n    # Método de atualização do metadados (Book)\n    def __updateMetadata__(self, col_list, dict_list):\n      \n      # Verifica e insere informações novas\n      for coluna in [nova_coluna for nova_coluna in col_list if nova_coluna not in self.Dataframe.columns]:\n        self.Metadata.append({\"nome\": coluna, \"origem\": None, \"tipo\": \"StringType()\", \"valor_se_nulo\": None, \"dominio\": None, \"transformacao\": None, \n                              \"filtro\": None, \"janela_de_tempo\": None, \"variavel_temporal\": None, \"agregacao\": None, \"duplicidade\": None, \n                              \"versao\": self.ref})\n\n      # Atualiza de fato o metadados\n      for info in self.Metadata:\n        if info[\"nome\"] in col_list:\n          index = col_list.index(info[\"nome\"])\n          dict = dict_list[index]\n\n          for chave in dict.keys():\n            info[chave] = dict[chave]\n    \n    \n    # Visualização do Metadados (Book)\n    def viewMetadata(self, truncate=True):\n\n      meta_DF = self.__buildMetadataDF__()\n      meta_DF = meta_DF.select(col(\"nome\").alias(\"Nome\"), col(\"origem\").alias(\"Origem\"), col(\"tipo\").alias(\"Tipo\"), col(\"valor_se_nulo\").alias(\"Valor/Expressão(SQL) se Nulo\"), \n                               col(\"dominio\").alias(\"Domínio\"), col(\"transformacao\").alias(\"Transformação(SQL)\"), col(\"filtro\").alias(\"Filtro(SQL) na Origem\"),\n                               col(\"janela_de_tempo\").alias(\"(Range de Datas, Unidade de Tempo)\"), col(\"variavel_temporal\").alias(\"Variável Temporal\"),\n                               col(\"agregacao\").alias(\"Função de Agregação\"), col(\"duplicidade\").alias(\"Remoção de Duplicidade por\"), col(\"versao\").alias(\"Versão\"))\n      \n      return meta_DF.show(len(self.Metadata), truncate)\n    \n    \n    # Realiza extração dos dados\n    def __extractAs__(self, ref, dict):\n        \n        # Aplica filtro(s) na origem caso necessário\n        if dict[\"filtro\"]:\n          filtrada = self.Origem.select(self.chave_primaria, dict[\"origem\"], dict[\"variavel_temporal\"]).filter(dict[\"filtro\"])\n        else:\n          filtrada = self.Origem.select(self.chave_primaria, dict[\"origem\"], dict[\"variavel_temporal\"])\n        \n        # Verifica se após o filtro a base filtrada possui volumetria, caso contrário aborta o processo e informa ao usuário\n        if filtrada.limit(1).count() == 0:\n          raise EmptyDataframeError(\"O filtro para esta variável resultou em uma volumetria zerada. Verificar se a construção do filtro está correta.\")\n          \n        # Aplica janelas de tempo\n        if dict[\"janela_de_tempo\"][1] in [\"d\", \"s\", \"m\", \"a\"]:\n            inicio = date_add(lit(ref), dict[\"janela_de_tempo\"][0][0] * self.depara_dias_segundos[dict[\"janela_de_tempo\"][1]])\n            fim = date_add(lit(ref), dict[\"janela_de_tempo\"][0][1] * self.depara_dias_segundos[dict[\"janela_de_tempo\"][1]])\n            \n            extracao = filtrada.filter(col(dict[\"variavel_temporal\"]).between(inicio, fim))\n        else:\n            inicio = unix_timestamp(lit(ref)) + dict[\"janela_de_tempo\"][0][0] * self.depara_dias_segundos[dict[\"janela_de_tempo\"][1]]\n            fim = unix_timestamp(lit(ref)) + dict[\"janela_de_tempo\"][0][1] * self.depara_dias_segundos[dict[\"janela_de_tempo\"][1]]\n            \n            extracao = filtrada.filter(unix_timestamp(col(dict[\"variavel_temporal\"])).between(inicio, fim))\n        \n        # Verifica e remove duplicidade\n        if dict[\"duplicidade\"]:\n            extracao = extracao.dropDuplicates(dict[\"duplicidade\"])\n            \n        return extracao.withColumn(self.chave_temporal, lit(ref))\n    \n    \n    # Realiza agregação dos dados\n    def __aggregateAs__(self, extracao, info):\n      \n      agregacao = extracao.groupBy(self.chave_primaria, self.chave_temporal).agg(expr(info[\"agregacao\"]).alias(info[\"nome\"]))\n      return agregacao\n    \n    \n    # Recupera o público e constrói o Book\n    def __buildAs__(self, agregacao):\n      \n      self.Dataframe = self.Dataframe.join(agregacao, on = [self.chave_primaria, self.chave_temporal], how = \"left\").orderBy(self.chave_primaria, self.chave_temporal)\n    \n    \n    # Aplica o dataforming sobre o Book\n    def __dataformAs__(self, info, imported_metadata):\n      \n      self.transformedAs({info[\"nome\"]: info[\"transformacao\"]}, imported_metadata)\n      self.coalescedAs({info[\"nome\"]: info[\"valor_se_nulo\"]}, imported_metadata)\n      self.castedAs({info[\"nome\"]: info[\"tipo\"]}, imported_metadata)\n      self.domainAs({info[\"nome\"]: info[\"dominio\"]}, imported_metadata)\n    \n    \n    # Acoplamento dos módulos: Extractor, Aggregator , Builder e Dataformer\n    def __ETL__(self, info, vetor_de_datas, imported_metadata):\n      \n      aux = list(vetor_de_datas)\n      \n      # Etapa 03 - Extração\n      extracao = self.__extractAs__(aux[0], info)\n      aux.remove(aux[0])\n\n      for ref in aux:\n        extracao = extracao.union(self.__extractAs__(ref, info))\n      \n      # Etapa 04 - Agregação\n      agregacao = self.__aggregateAs__(extracao, info)\n      \n      # Etapa 05 - Recupera Público\n      self.__buildAs__(agregacao)\n      \n      # Etapa 06 - Dataforming\n      self.__dataformAs__(info, imported_metadata)\n    \n    \n    # Módulo de construção de variáveis\n    def bookedAs(self, lst, imported_metadata=False):\n        \n        vars_com_origem = [var for var in lst if var[\"origem\"] and var[\"nome\"] not in self.Dataframe.columns]\n        vars_sem_origem = [var for var in lst if not var[\"origem\"] and var[\"nome\"] not in self.Dataframe.columns]\n        \n        # Etapa 01 - Insere no metadados as informações das variáveis novas\n        if not imported_metadata:\n          variaveis = [var[\"nome\"] for var in vars_com_origem]\n          self.__updateMetadata__(variaveis, vars_com_origem)\n        \n        # Etapa 02 - Gera vetor de datas para extração a partir do público\n        vetor_de_datas = [str(data[self.chave_temporal]) for data in self.Publico.select(self.chave_temporal).orderBy(self.chave_temporal).dropDuplicates().collect()]\n            \n        # Inicia a construção das variáveis de grau menor ou iguais a um\n        for info in vars_com_origem:\n          \n          self.__ETL__(info, vetor_de_datas, imported_metadata)\n        \n        # Inicia a construção das variáveis de grau maior ou iguais a 2\n        index = 0\n        while vars_sem_origem:\n          \n          info = vars_sem_origem[index]\n          \n          try:\n            # Verificamos se a variável necessita de agregação, dado que, variáveis deste tipo agregam como base de origem o próprio Book\n            if info[\"agregacao\"]:\n              self.__updateMetadata__([info[\"nome\"]], [info])\n              extracao = self.Dataframe\n\n              # Filtramos o próprio Book se necessário\n              if info[\"filtro\"]:\n                extracao = extracao.filter(info[\"filtro\"])\n\n              # Realiza agregação e a recuperação do público\n              agregacao = self.__aggregateAs__(extracao, info)\n              self.__buildAs__(agregacao)\n\n            self.__dataformAs__(info, imported_metadata)\n            vars_sem_origem.remove(info)\n            index = 0\n          except:\n            index += 1\n            ","user":"anonymous","dateUpdated":"2019-11-28T11:55:45+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1574942087677_-1459393496","id":"20191011-195242_1990929693","dateCreated":"2019-11-28T11:54:47+0000","dateStarted":"2019-11-28T11:55:45+0000","dateFinished":"2019-11-28T11:55:45+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2653"},{"title":"Leitura da origem","text":"%pyspark\n\n# Vamos trazer apenas os status mais recentes de cada pedido\nstage0 = spark.read.parquet(origem_stage0) \\\n    .withColumn(\"order\", expr(\"row_number() over(partition by cd_request order by ts_updated desc)\")) \\\n    .filter(col(\"order\") == 1) \\\n    .drop(\"order\") \\\n    .persist(StorageLevel.DISK_ONLY)\n    \nprint(\"> Volumetria da stage0 de pedidos com os status mais recentes: {}\".format(stage0.count()))","user":"anonymous","dateUpdated":"2019-11-28T11:59:30+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"> Volumetria da stage0 de pedidos com os status mais recentes: 3721777\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-29-133-190.ec2.internal:4040/jobs/job?id=0","http://ip-172-29-133-190.ec2.internal:4040/jobs/job?id=1","http://ip-172-29-133-190.ec2.internal:4040/jobs/job?id=2"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1574942087677_-985455825","id":"20191011-193935_424087581","dateCreated":"2019-11-28T11:54:47+0000","dateStarted":"2019-11-28T11:59:30+0000","dateFinished":"2019-11-28T12:00:05+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2654"},{"title":"Gera Público","text":"%pyspark\n\n# Vamos gerar um público com uma ref apenas para testes\npublico = stage0.filter(col(\"cd_uuid\") != \"\").limit(5).select(\"cd_uuid\").dropDuplicates().withColumn(\"dt_ref\", lit(\"2019-11-28\").cast(DateType())).persist(StorageLevel.DISK_ONLY)\nprint(\"> Volumetria do público de entrada: {}\".format(publico.count()))","user":"anonymous","dateUpdated":"2019-11-28T12:01:08+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"> Volumetria do público de entrada: 5\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-29-133-190.ec2.internal:4040/jobs/job?id=3"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1574942087678_7360793","id":"20191011-194456_1129754597","dateCreated":"2019-11-28T11:54:47+0000","dateStarted":"2019-11-28T12:01:08+0000","dateFinished":"2019-11-28T12:01:08+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2655"},{"text":"%pyspark\n\npub00 = publico.withColumn(\"dt_ref\", lit(\"2019-10-31\").cast(DateType()))\npub01 = publico.withColumn(\"dt_ref\", lit(\"2019-09-30\").cast(DateType()))\npub02 = publico.withColumn(\"dt_ref\", lit(\"2019-08-31\").cast(DateType()))\npub = pub00.union(pub01).union(pub02)","user":"anonymous","dateUpdated":"2019-11-28T12:04:26+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1574942506479_-279418328","id":"20191128-120146_1397126280","dateCreated":"2019-11-28T12:01:46+0000","dateStarted":"2019-11-28T12:04:26+0000","dateFinished":"2019-11-28T12:04:26+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2656"},{"text":"%pyspark\n\npub.show(15, False)","user":"anonymous","dateUpdated":"2019-11-28T12:04:34+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+------------------------------------+----------+\n|cd_uuid                             |dt_ref    |\n+------------------------------------+----------+\n|021743f6-751b-41cb-859a-b4eca07a729c|2019-10-31|\n|0886509f-14d9-4f0f-947a-5dd0797c55cd|2019-10-31|\n|391822c3-de26-45c1-b3c9-a351ccaeec2c|2019-10-31|\n|16414a4e-d499-4abe-a070-cbaac912442c|2019-10-31|\n|3ff3b932-387b-45ac-8a73-9023705ca5f1|2019-10-31|\n|021743f6-751b-41cb-859a-b4eca07a729c|2019-09-30|\n|0886509f-14d9-4f0f-947a-5dd0797c55cd|2019-09-30|\n|391822c3-de26-45c1-b3c9-a351ccaeec2c|2019-09-30|\n|16414a4e-d499-4abe-a070-cbaac912442c|2019-09-30|\n|3ff3b932-387b-45ac-8a73-9023705ca5f1|2019-09-30|\n|021743f6-751b-41cb-859a-b4eca07a729c|2019-08-31|\n|0886509f-14d9-4f0f-947a-5dd0797c55cd|2019-08-31|\n|391822c3-de26-45c1-b3c9-a351ccaeec2c|2019-08-31|\n|16414a4e-d499-4abe-a070-cbaac912442c|2019-08-31|\n|3ff3b932-387b-45ac-8a73-9023705ca5f1|2019-08-31|\n+------------------------------------+----------+\n\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-29-133-190.ec2.internal:4040/jobs/job?id=6","http://ip-172-29-133-190.ec2.internal:4040/jobs/job?id=7"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1574942472838_-1804250757","id":"20191128-120112_1712274116","dateCreated":"2019-11-28T12:01:12+0000","dateStarted":"2019-11-28T12:04:34+0000","dateFinished":"2019-11-28T12:04:34+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2657"},{"title":"Inicia construção do Book","text":"%pyspark\n\n# Iniciação da instância Book\nbook = Book(stage0, \"cd_uuid\", \"dt_ref\", Publico=pub)","user":"anonymous","dateUpdated":"2019-11-28T12:05:04+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1574942087678_-443888421","id":"20191011-195423_403897187","dateCreated":"2019-11-28T11:54:47+0000","dateStarted":"2019-11-28T12:05:04+0000","dateFinished":"2019-11-28T12:05:04+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2658"},{"title":"Criação de variáveis","text":"%pyspark\n\nvars = [\n    {\n        \"nome\": \"total_pedidos_ultimos30d\",\n        \"origem\": \"cd_request\",\n        \"tipo\": IntegerType(),\n        \"valor_se_nulo\": 0,\n        \"dominio\": None,\n        \"transformacao\": None,\n        \"filtro\": \"cd_uuid <> ''\",\n        \"janela_de_tempo\": ([-30, 0], \"d\"),\n        \"variavel_temporal\": \"dt_request\",\n        \"agregacao\": \"count(*)\",\n        \"duplicidade\": None\n    },\n    {\n        \"nome\": \"total_pedidos_ultimos60d\",\n        \"origem\": \"cd_request\",\n        \"tipo\": IntegerType(),\n        \"valor_se_nulo\": 0,\n        \"dominio\": None,\n        \"transformacao\": None,\n        \"filtro\": \"cd_uuid <> ''\",\n        \"janela_de_tempo\": ([-60, 0], \"d\"),\n        \"variavel_temporal\": \"dt_request\",\n        \"agregacao\": \"count(*)\",\n        \"duplicidade\": None\n    },\n    {\n        \"nome\": \"total_pedidos_liberados_ultimos30d\",\n        \"origem\": \"cd_request\",\n        \"tipo\": IntegerType(),\n        \"valor_se_nulo\": 0,\n        \"dominio\": None,\n        \"transformacao\": None,\n        \"filtro\": \"cd_uuid <> '' and ds_status = 'Liberado'\",\n        \"janela_de_tempo\": ([-30, 0], \"d\"),\n        \"variavel_temporal\": \"dt_request\",\n        \"agregacao\": \"count(*)\",\n        \"duplicidade\": None\n    },\n    {\n        \"nome\": \"razao_total_pedidos_ultimos30_60d\",\n        \"origem\": None,\n        \"tipo\": DoubleType(),\n        \"valor_se_nulo\": 0,\n        \"dominio\": None,\n        \"transformacao\": \"case when total_pedidos_ultimos60d = 0 then 0 else total_pedidos_ultimos30d/total_pedidos_ultimos60d end\",\n        \"filtro\": None,\n        \"janela_de_tempo\": None,\n        \"variavel_temporal\": None,\n        \"agregacao\": None,\n        \"duplicidade\": None\n    }\n]\n\nbook.bookedAs(vars)","user":"anonymous","dateUpdated":"2019-11-28T12:13:42+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-29-133-190.ec2.internal:4040/jobs/job?id=8","http://ip-172-29-133-190.ec2.internal:4040/jobs/job?id=9","http://ip-172-29-133-190.ec2.internal:4040/jobs/job?id=10","http://ip-172-29-133-190.ec2.internal:4040/jobs/job?id=11","http://ip-172-29-133-190.ec2.internal:4040/jobs/job?id=12","http://ip-172-29-133-190.ec2.internal:4040/jobs/job?id=13","http://ip-172-29-133-190.ec2.internal:4040/jobs/job?id=14","http://ip-172-29-133-190.ec2.internal:4040/jobs/job?id=15","http://ip-172-29-133-190.ec2.internal:4040/jobs/job?id=16","http://ip-172-29-133-190.ec2.internal:4040/jobs/job?id=17","http://ip-172-29-133-190.ec2.internal:4040/jobs/job?id=18"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1574942087678_755444614","id":"20191011-195549_766849383","dateCreated":"2019-11-28T11:54:47+0000","dateStarted":"2019-11-28T12:13:42+0000","dateFinished":"2019-11-28T12:13:46+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2659"},{"text":"%pyspark\n\nbook.dataframe.show(15, False)","user":"anonymous","dateUpdated":"2019-11-28T12:14:26+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+------------------------------------+----------+----------+------------------------+------------------------+----------------------------------+---------------------------------+\n|cd_uuid                             |dt_ref    |dt_proc   |total_pedidos_ultimos30d|total_pedidos_ultimos60d|total_pedidos_liberados_ultimos30d|razao_total_pedidos_ultimos30_60d|\n+------------------------------------+----------+----------+------------------------+------------------------+----------------------------------+---------------------------------+\n|021743f6-751b-41cb-859a-b4eca07a729c|2019-08-31|2019-11-28|0                       |0                       |0                                 |0.0                              |\n|021743f6-751b-41cb-859a-b4eca07a729c|2019-09-30|2019-11-28|0                       |0                       |0                                 |0.0                              |\n|021743f6-751b-41cb-859a-b4eca07a729c|2019-10-31|2019-11-28|1                       |1                       |0                                 |1.0                              |\n|0886509f-14d9-4f0f-947a-5dd0797c55cd|2019-08-31|2019-11-28|0                       |0                       |0                                 |0.0                              |\n|0886509f-14d9-4f0f-947a-5dd0797c55cd|2019-09-30|2019-11-28|0                       |0                       |0                                 |0.0                              |\n|0886509f-14d9-4f0f-947a-5dd0797c55cd|2019-10-31|2019-11-28|0                       |0                       |0                                 |0.0                              |\n|16414a4e-d499-4abe-a070-cbaac912442c|2019-08-31|2019-11-28|0                       |3                       |0                                 |0.0                              |\n|16414a4e-d499-4abe-a070-cbaac912442c|2019-09-30|2019-11-28|0                       |0                       |0                                 |0.0                              |\n|16414a4e-d499-4abe-a070-cbaac912442c|2019-10-31|2019-11-28|0                       |0                       |0                                 |0.0                              |\n|391822c3-de26-45c1-b3c9-a351ccaeec2c|2019-08-31|2019-11-28|2                       |5                       |0                                 |0.4                              |\n|391822c3-de26-45c1-b3c9-a351ccaeec2c|2019-09-30|2019-11-28|0                       |2                       |0                                 |0.0                              |\n|391822c3-de26-45c1-b3c9-a351ccaeec2c|2019-10-31|2019-11-28|2                       |2                       |0                                 |1.0                              |\n|3ff3b932-387b-45ac-8a73-9023705ca5f1|2019-08-31|2019-11-28|0                       |0                       |0                                 |0.0                              |\n|3ff3b932-387b-45ac-8a73-9023705ca5f1|2019-09-30|2019-11-28|0                       |0                       |0                                 |0.0                              |\n|3ff3b932-387b-45ac-8a73-9023705ca5f1|2019-10-31|2019-11-28|0                       |0                       |0                                 |0.0                              |\n+------------------------------------+----------+----------+------------------------+------------------------+----------------------------------+---------------------------------+\n\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-29-133-190.ec2.internal:4040/jobs/job?id=23","http://ip-172-29-133-190.ec2.internal:4040/jobs/job?id=24","http://ip-172-29-133-190.ec2.internal:4040/jobs/job?id=25","http://ip-172-29-133-190.ec2.internal:4040/jobs/job?id=26"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1574942087678_-914511473","id":"20191011-201500_549492513","dateCreated":"2019-11-28T11:54:47+0000","dateStarted":"2019-11-28T12:14:26+0000","dateFinished":"2019-11-28T12:14:35+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2660"},{"text":"%pyspark\n\nbook.viewMetadata(False)","user":"anonymous","dateUpdated":"2019-11-28T12:15:35+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+----------------------------------+----------+-------------+----------------------------+-------+--------------------------------------------------------------------------------------------------------+----------------------------------------+----------------------------------+-----------------+-------------------+--------------------------+----------+\n|Nome                              |Origem    |Tipo         |Valor/Expressão(SQL) se Nulo|Domínio|Transformação(SQL)                                                                                      |Filtro(SQL) na Origem                   |(Range de Datas, Unidade de Tempo)|Variável Temporal|Função de Agregação|Remoção de Duplicidade por|Versão    |\n+----------------------------------+----------+-------------+----------------------------+-------+--------------------------------------------------------------------------------------------------------+----------------------------------------+----------------------------------+-----------------+-------------------+--------------------------+----------+\n|total_pedidos_ultimos30d          |cd_request|IntegerType()|0                           |None   |None                                                                                                    |cd_uuid <> ''                           |([-30, 0], 'd')                   |dt_request       |count(*)           |None                      |2019-11-28|\n|total_pedidos_ultimos60d          |cd_request|IntegerType()|0                           |None   |None                                                                                                    |cd_uuid <> ''                           |([-60, 0], 'd')                   |dt_request       |count(*)           |None                      |2019-11-28|\n|total_pedidos_liberados_ultimos30d|cd_request|IntegerType()|0                           |None   |None                                                                                                    |cd_uuid <> '' and ds_status = 'Liberado'|([-30, 0], 'd')                   |dt_request       |count(*)           |None                      |2019-11-28|\n|razao_total_pedidos_ultimos30_60d |None      |DoubleType() |0                           |None   |case when total_pedidos_ultimos60d = 0 then 0 else total_pedidos_ultimos30d/total_pedidos_ultimos60d end|None                                    |None                              |None             |None               |None                      |2019-11-28|\n+----------------------------------+----------+-------------+----------------------------+-------+--------------------------------------------------------------------------------------------------------+----------------------------------------+----------------------------------+-----------------+-------------------+--------------------------+----------+\n\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-29-133-190.ec2.internal:4040/jobs/job?id=31","http://ip-172-29-133-190.ec2.internal:4040/jobs/job?id=32","http://ip-172-29-133-190.ec2.internal:4040/jobs/job?id=33","http://ip-172-29-133-190.ec2.internal:4040/jobs/job?id=34"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1574943269202_619983830","id":"20191128-121429_318013585","dateCreated":"2019-11-28T12:14:29+0000","dateStarted":"2019-11-28T12:15:35+0000","dateFinished":"2019-11-28T12:15:35+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2661"},{"text":"%pyspark\n\nbook.saveMetadata(destino_meta)","user":"anonymous","dateUpdated":"2019-11-28T12:19:24+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"'> Metadados exportado com SUCESSO para o diret\\xc3\\xb3rio: s3://lake-ecs-ia-utils/dataform/metadados/.'\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-29-133-190.ec2.internal:4040/jobs/job?id=35"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1574943390578_507108565","id":"20191128-121630_1656694449","dateCreated":"2019-11-28T12:16:30+0000","dateStarted":"2019-11-28T12:19:24+0000","dateFinished":"2019-11-28T12:19:28+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2662"},{"text":"%pyspark\n\nmetadados = readMetadata(destino_meta + \"book_pedidos.json\")\nmetadados","user":"anonymous","dateUpdated":"2019-11-28T12:24:25+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"[{u'transformacao': None, u'tipo': u'IntegerType()', u'agregacao': u'count(*)', u'nome': u'total_pedidos_ultimos30d', u'janela_de_tempo': [(-30, 0), u'd'], u'versao': u'2019-11-28', u'variavel_temporal': u'dt_request', u'dominio': None, u'origem': u'cd_request', u'filtro': u\"cd_uuid <> ''\", u'valor_se_nulo': u'0', u'duplicidade': None}, {u'transformacao': None, u'tipo': u'IntegerType()', u'agregacao': u'count(*)', u'nome': u'total_pedidos_ultimos60d', u'janela_de_tempo': [(-60, 0), u'd'], u'versao': u'2019-11-28', u'variavel_temporal': u'dt_request', u'dominio': None, u'origem': u'cd_request', u'filtro': u\"cd_uuid <> ''\", u'valor_se_nulo': u'0', u'duplicidade': None}, {u'transformacao': None, u'tipo': u'IntegerType()', u'agregacao': u'count(*)', u'nome': u'total_pedidos_liberados_ultimos30d', u'janela_de_tempo': [(-30, 0), u'd'], u'versao': u'2019-11-28', u'variavel_temporal': u'dt_request', u'dominio': None, u'origem': u'cd_request', u'filtro': u\"cd_uuid <> '' and ds_status = 'Liberado'\", u'valor_se_nulo': u'0', u'duplicidade': None}, {u'transformacao': u'case when total_pedidos_ultimos60d = 0 then 0 else total_pedidos_ultimos30d/total_pedidos_ultimos60d end', u'tipo': u'DoubleType()', u'agregacao': None, u'nome': u'razao_total_pedidos_ultimos30_60d', u'janela_de_tempo': None, u'versao': u'2019-11-28', u'variavel_temporal': None, u'dominio': None, u'origem': None, u'filtro': None, u'valor_se_nulo': u'0', u'duplicidade': None}]\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-29-133-190.ec2.internal:4040/jobs/job?id=37"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1574943722310_-1134370798","id":"20191128-122202_1577087466","dateCreated":"2019-11-28T12:22:02+0000","dateStarted":"2019-11-28T12:24:25+0000","dateFinished":"2019-11-28T12:24:26+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2663"},{"text":"%pyspark\n\nbookPrd = Book(stage0, \"cd_uuid\", \"dt_ref\", Metadata=metadados)","user":"anonymous","dateUpdated":"2019-11-28T12:25:53+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-29-133-190.ec2.internal:4040/jobs/job?id=38","http://ip-172-29-133-190.ec2.internal:4040/jobs/job?id=39","http://ip-172-29-133-190.ec2.internal:4040/jobs/job?id=40","http://ip-172-29-133-190.ec2.internal:4040/jobs/job?id=41","http://ip-172-29-133-190.ec2.internal:4040/jobs/job?id=42"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1574943871868_-1569443413","id":"20191128-122431_41278317","dateCreated":"2019-11-28T12:24:31+0000","dateStarted":"2019-11-28T12:25:53+0000","dateFinished":"2019-11-28T12:25:58+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2664"},{"text":"%pyspark\n\nbookPrd.dataframe.show(20, False)","user":"anonymous","dateUpdated":"2019-11-28T12:27:06+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+------------------------------------+----------+----------+------------------------+------------------------+----------------------------------+---------------------------------+\n|cd_uuid                             |dt_ref    |dt_proc   |total_pedidos_ultimos30d|total_pedidos_ultimos60d|total_pedidos_liberados_ultimos30d|razao_total_pedidos_ultimos30_60d|\n+------------------------------------+----------+----------+------------------------+------------------------+----------------------------------+---------------------------------+\n|                                    |2019-11-28|2019-11-28|0                       |0                       |0                                 |0.0                              |\n|0000004b-220d-4d38-86aa-2d3b78b5f99c|2019-11-28|2019-11-28|0                       |0                       |0                                 |0.0                              |\n|000003f4-3163-40a8-a01b-49bfc663ee08|2019-11-28|2019-11-28|0                       |0                       |0                                 |0.0                              |\n|000009e6-4e73-4db1-8d9a-724e4f4d8081|2019-11-28|2019-11-28|0                       |0                       |0                                 |0.0                              |\n|00000ab8-05f0-4868-b12c-2bd44f620a0f|2019-11-28|2019-11-28|0                       |0                       |0                                 |0.0                              |\n|00000b89-1255-4c78-80a6-ae446aedb53f|2019-11-28|2019-11-28|0                       |0                       |0                                 |0.0                              |\n|00002433-583e-4b0d-8048-0e943cc3c5f4|2019-11-28|2019-11-28|0                       |0                       |0                                 |0.0                              |\n|00003073-8573-47d5-8fae-f402ad7453d1|2019-11-28|2019-11-28|0                       |2                       |0                                 |0.0                              |\n|00003de7-a80a-4429-a963-f14f3b4cb6b6|2019-11-28|2019-11-28|0                       |0                       |0                                 |0.0                              |\n|00003fbb-09dd-4506-903e-d2081fcd0884|2019-11-28|2019-11-28|0                       |0                       |0                                 |0.0                              |\n|00004361-7e32-4d28-8218-0658bb7d96d3|2019-11-28|2019-11-28|0                       |0                       |0                                 |0.0                              |\n|00004424-3050-4573-86fb-d80982814e8d|2019-11-28|2019-11-28|0                       |0                       |0                                 |0.0                              |\n|00005414-e826-4632-b5ca-cefe6b4a14f8|2019-11-28|2019-11-28|0                       |0                       |0                                 |0.0                              |\n|00006c91-a908-49e0-b8a5-39522dd04682|2019-11-28|2019-11-28|0                       |0                       |0                                 |0.0                              |\n|00007581-244b-412f-acdf-c3b8cc66b9e2|2019-11-28|2019-11-28|0                       |1                       |0                                 |0.0                              |\n|00007d05-47bf-42b0-a273-a8a68d76d21f|2019-11-28|2019-11-28|0                       |0                       |0                                 |0.0                              |\n|00007ef0-a906-4d4f-9eb8-57926523a555|2019-11-28|2019-11-28|0                       |1                       |0                                 |0.0                              |\n|00008213-a899-419e-8421-d035ffe76e51|2019-11-28|2019-11-28|0                       |0                       |0                                 |0.0                              |\n|000083cc-e609-43db-87c3-9970c6385b0a|2019-11-28|2019-11-28|0                       |0                       |0                                 |0.0                              |\n|000092fd-f232-42b9-8e45-1f3011499889|2019-11-28|2019-11-28|0                       |1                       |0                                 |0.0                              |\n+------------------------------------+----------+----------+------------------------+------------------------+----------------------------------+---------------------------------+\nonly showing top 20 rows\n\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-29-133-190.ec2.internal:4040/jobs/job?id=47","http://ip-172-29-133-190.ec2.internal:4040/jobs/job?id=48","http://ip-172-29-133-190.ec2.internal:4040/jobs/job?id=49","http://ip-172-29-133-190.ec2.internal:4040/jobs/job?id=50"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1574943961669_838932881","id":"20191128-122601_300553300","dateCreated":"2019-11-28T12:26:01+0000","dateStarted":"2019-11-28T12:27:06+0000","dateFinished":"2019-11-28T12:27:23+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2665"},{"title":"Homologação","text":"%pyspark\n\n# total_pedidos_ultimos30d\nstage0 \\\n    .filter(col(\"dt_request\").between(date_add(lit(\"2019-10-11\"), -30), \"2019-10-11\")) \\\n    .groupBy(\"cd_uuid\") \\\n    .agg(count(\"*\").alias(\"homolog_total_pedidos_ultimos30d\")) \\\n    .join(book.dataframe.select(\"cd_uuid\", \"total_pedidos_ultimos30d\"), on = [\"cd_uuid\"], how = \"inner\") \\\n    .show(5, False)\n\n\n# total_pedidos_ultimos60d\nstage0 \\\n    .filter(col(\"dt_request\").between(date_add(lit(\"2019-10-11\"), -60), \"2019-10-11\")) \\\n    .groupBy(\"cd_uuid\") \\\n    .agg(count(\"*\").alias(\"homolog_total_pedidos_ultimos60d\")) \\\n    .join(book.dataframe.select(\"cd_uuid\", \"total_pedidos_ultimos60d\"), on = [\"cd_uuid\"], how = \"inner\") \\\n    .show(5, False)\n\n\n# total_pedidos_liberados_ultimos30d\nstage0 \\\n    .filter(col(\"dt_request\").between(date_add(lit(\"2019-10-11\"), -30), \"2019-10-11\")) \\\n    .filter(col(\"ds_status\") == \"Liberado\") \\\n    .groupBy(\"cd_uuid\") \\\n    .agg(count(\"*\").alias(\"homolog_total_pedidos_liberados_ultimos30d\")) \\\n    .join(book.dataframe.select(\"cd_uuid\", \"total_pedidos_liberados_ultimos30d\"), on = [\"cd_uuid\"], how = \"inner\") \\\n    .show(5, False)","user":"anonymous","dateUpdated":"2019-11-28T11:54:47+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+------------------------------------+--------------------------------+------------------------+\n|cd_uuid                             |homolog_total_pedidos_ultimos30d|total_pedidos_ultimos30d|\n+------------------------------------+--------------------------------+------------------------+\n|fa30d10a-3573-443b-bfd8-35be9c5c5c55|3                               |3                       |\n+------------------------------------+--------------------------------+------------------------+\n\n+------------------------------------+--------------------------------+------------------------+\n|cd_uuid                             |homolog_total_pedidos_ultimos60d|total_pedidos_ultimos60d|\n+------------------------------------+--------------------------------+------------------------+\n|fa30d10a-3573-443b-bfd8-35be9c5c5c55|3                               |3                       |\n|922b8611-2015-466e-ba6d-b1afb403da0b|3                               |3                       |\n+------------------------------------+--------------------------------+------------------------+\n\n+-------+------------------------------------------+----------------------------------+\n|cd_uuid|homolog_total_pedidos_liberados_ultimos30d|total_pedidos_liberados_ultimos30d|\n+-------+------------------------------------------+----------------------------------+\n+-------+------------------------------------------+----------------------------------+\n\n"}]},"apps":[],"jobName":"paragraph_1574942087679_-1903170419","id":"20191014-114220_600986844","dateCreated":"2019-11-28T11:54:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2666"},{"title":"Com Público gerado a partir da origem","text":"%pyspark\n\n# Iniciação da instância Book\nbook = Book(stage0, \"cd_uuid\", \"dt_ref\")","user":"anonymous","dateUpdated":"2019-11-28T11:54:47+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1574942087679_-682887531","id":"20191014-120630_871690754","dateCreated":"2019-11-28T11:54:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2667"},{"title":"Criação das Variáveis","text":"%pyspark\n\nvars = [\n    {\n        \"nome\": \"total_pedidos_ultimos30d\",\n        \"origem\": \"cd_request\",\n        \"tipo\": IntegerType(),\n        \"valor_se_nulo\": 0,\n        \"dominio\": None,\n        \"transformacao\": None,\n        \"filtro\": \"cd_uuid <> ''\",\n        \"janela_de_tempo\": ([-30, 0], \"d\"),\n        \"variavel_temporal\": \"dt_request\",\n        \"agregacao\": \"count(*)\",\n        \"duplicidade\": None\n    },\n    {\n        \"nome\": \"total_pedidos_ultimos60d\",\n        \"origem\": \"cd_request\",\n        \"tipo\": IntegerType(),\n        \"valor_se_nulo\": 0,\n        \"dominio\": None,\n        \"transformacao\": None,\n        \"filtro\": \"cd_uuid <> ''\",\n        \"janela_de_tempo\": ([-60, 0], \"d\"),\n        \"variavel_temporal\": \"dt_request\",\n        \"agregacao\": \"count(*)\",\n        \"duplicidade\": None\n    },\n    {\n        \"nome\": \"total_pedidos_liberados_ultimos30d\",\n        \"origem\": \"cd_request\",\n        \"tipo\": IntegerType(),\n        \"valor_se_nulo\": 0,\n        \"dominio\": None,\n        \"transformacao\": None,\n        \"filtro\": \"cd_uuid <> '' and ds_status = 'Liberado'\",\n        \"janela_de_tempo\": ([-30, 0], \"d\"),\n        \"variavel_temporal\": \"dt_request\",\n        \"agregacao\": \"count(*)\",\n        \"duplicidade\": None\n    },\n    {\n        \"nome\": \"razao_liberados_pedidos_ultimos30d\",\n        \"origem\": None,\n        \"tipo\": IntegerType(),\n        \"valor_se_nulo\": 0,\n        \"dominio\": None,\n        \"transformacao\": \"case when total_pedidos_ultimos30d = 0 then 0 else round(total_pedidos_liberados_ultimos30d/total_pedidos_ultimos30d, 2) end\",\n        \"filtro\": None,\n        \"janela_de_tempo\": None,\n        \"variavel_temporal\": None,\n        \"agregacao\": None,\n        \"duplicidade\": None\n    }\n]\n\nbook.bookedAs(vars)","user":"anonymous","dateUpdated":"2019-11-28T11:54:47+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1574942087679_635498501","id":"20191014-144235_1862125346","dateCreated":"2019-11-28T11:54:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2668"},{"text":"%pyspark\n\nbook.dataframe.show(5)","user":"anonymous","dateUpdated":"2019-11-28T11:54:47+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------------------+----------+----------+------------------------+------------------------+----------------------------------+----------------------------------+\n|             cd_uuid|    dt_ref|   dt_proc|total_pedidos_ultimos30d|total_pedidos_ultimos60d|total_pedidos_liberados_ultimos30d|razao_liberados_pedidos_ultimos30d|\n+--------------------+----------+----------+------------------------+------------------------+----------------------------------+----------------------------------+\n|                    |2019-10-14|2019-10-14|                       0|                       0|                                 0|                                 0|\n|0000004b-220d-4d3...|2019-10-14|2019-10-14|                       0|                       0|                                 0|                                 0|\n|000003f4-3163-40a...|2019-10-14|2019-10-14|                       0|                       0|                                 0|                                 0|\n|000009e6-4e73-4db...|2019-10-14|2019-10-14|                       0|                       0|                                 0|                                 0|\n|00000ab8-05f0-486...|2019-10-14|2019-10-14|                       0|                       1|                                 0|                                 0|\n+--------------------+----------+----------+------------------------+------------------------+----------------------------------+----------------------------------+\nonly showing top 5 rows\n\n"}]},"apps":[],"jobName":"paragraph_1574942087679_374826553","id":"20191014-144241_693670112","dateCreated":"2019-11-28T11:54:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2669"},{"text":"%pyspark\n\nbook.dataframe.count()","user":"anonymous","dateUpdated":"2019-11-28T11:54:47+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"1518198\n"}]},"apps":[],"jobName":"paragraph_1574942087680_1142893202","id":"20191014-145233_2017862005","dateCreated":"2019-11-28T11:54:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2670"},{"text":"%pyspark\n\nbook.dataframe.groupBy(\"dt_ref\").agg(max(col(\"razao_liberados_pedidos_ultimos30d\"))).show(1, False)","user":"anonymous","dateUpdated":"2019-11-28T11:54:47+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+----------+---------------------------------------+\n|dt_ref    |max(razao_liberados_pedidos_ultimos30d)|\n+----------+---------------------------------------+\n|2019-10-14|1                                      |\n+----------+---------------------------------------+\n\n"}]},"apps":[],"jobName":"paragraph_1574942087680_286449636","id":"20191014-145423_1522176873","dateCreated":"2019-11-28T11:54:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2671"},{"text":"%pyspark\n\nbook.dataframe.filter(col(\"razao_liberados_pedidos_ultimos30d\") == 1).show(5, False)","user":"anonymous","dateUpdated":"2019-11-28T11:54:47+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+------------------------------------+----------+----------+------------------------+------------------------+----------------------------------+----------------------------------+\n|cd_uuid                             |dt_ref    |dt_proc   |total_pedidos_ultimos30d|total_pedidos_ultimos60d|total_pedidos_liberados_ultimos30d|razao_liberados_pedidos_ultimos30d|\n+------------------------------------+----------+----------+------------------------+------------------------+----------------------------------+----------------------------------+\n|00025a13-3931-482f-835e-0b822138d829|2019-10-14|2019-10-14|1                       |1                       |1                                 |1                                 |\n|000b148f-a14c-4b36-ac68-832d00dcbe8d|2019-10-14|2019-10-14|1                       |1                       |1                                 |1                                 |\n|001ddffc-23f3-4efa-b050-3473a034c042|2019-10-14|2019-10-14|1                       |1                       |1                                 |1                                 |\n|002052c2-27b6-42c8-9173-b282f0be0f39|2019-10-14|2019-10-14|1                       |1                       |1                                 |1                                 |\n|0031eafc-e7e8-4d92-a3ab-851235890dbb|2019-10-14|2019-10-14|1                       |1                       |1                                 |1                                 |\n+------------------------------------+----------+----------+------------------------+------------------------+----------------------------------+----------------------------------+\nonly showing top 5 rows\n\n"}]},"apps":[],"jobName":"paragraph_1574942087680_-1947348632","id":"20191014-150817_2060606972","dateCreated":"2019-11-28T11:54:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2672"},{"text":"%pyspark\n\nstage0 \\\n    .filter(col(\"ds_status\") == \"Liberado\") \\\n    .filter(col(\"dt_request\").between(date_add(current_date(), -30), current_date())) \\\n    .groupBy(\"cd_uuid\") \\\n    .agg(count(\"*\").alias(\"qtd_liberados\")) \\\n    .show(5, False)","user":"anonymous","dateUpdated":"2019-11-28T11:54:47+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+------------------------------------+-------------+\n|cd_uuid                             |qtd_liberados|\n+------------------------------------+-------------+\n|d8964086-f4f5-4c9b-8ece-dfa6f72c891e|1            |\n|1306fd61-a0ba-45be-80db-6955e6ffec08|1            |\n|6c457b63-e21a-450b-9450-4cd5ffb9ad7a|1            |\n|9eb454d7-e0f8-46b8-9e52-31f62b4e62c8|1            |\n|6d3e4da4-b319-45c1-9add-25fdf7d713d4|1            |\n+------------------------------------+-------------+\nonly showing top 5 rows\n\n"}]},"apps":[],"jobName":"paragraph_1574942087680_-256227507","id":"20191014-145629_1687969565","dateCreated":"2019-11-28T11:54:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2673"},{"text":"%pyspark\n","user":"anonymous","dateUpdated":"2019-11-28T11:54:47+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1574942087681_-1701566997","id":"20191014-150206_638445937","dateCreated":"2019-11-28T11:54:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2674"}],"name":"Thiago/book_pedidos_ind_desenv","id":"2EW4968RA","noteParams":{},"noteForms":{},"angularObjects":{"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}